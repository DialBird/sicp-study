(define (make-queue)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (empty?) (null? front-ptr))
    (define (front)
      (if (empty?) '()
        (car front-ptr)))
    (define (insert x)
      (let ((new-pair (cons x '())))
        (if (empty?)
          (begin (set! front-ptr new-pair)
                 (set! rear-ptr new-pair)
                 (cons front-ptr rear-ptr))
          (begin (set-cdr! rear-ptr new-pair)
                 (set! rear-ptr new-pair)
                 (cons front-ptr rear-ptr)))))
    (define (delete)
      (if (empty?)
        "no parts"
        (begin (set! front-ptr (cdr front-ptr))
               (cons front-ptr rear-ptr))))
    (define (print) front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'empty?) (empty?))
            ((eq? m 'front) (front))
            ((eq? m 'insert) insert)
            ((eq? m 'delete) (delete))
            ((eq? m 'print) (print))
            (else "no mission")))
    dispatch))

(define q1 (make-queue))
(q1 'empty?)
(q1 'front)
((q1 'insert) 1)
((q1 'insert) 3)
(q1 'delete)
(q1 'print)
