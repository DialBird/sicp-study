(define (make-deque)
  (let ((front-ptr '()) (rear-ptr '()))
    (define (empty?) (null? front-ptr))
    (define (front)
      (if (empty?) '()
        (car front-ptr)))
    (define (rear) 
      (if (empty?) '()
        (car rear-ptr)))
    (define (unshift x)
      (let ((new-pair (cons x '())))
        (if (empty?)
          (begin (set! front-ptr new-pair)
                 (set! rear-ptr new-pair)
                 (cons front-ptr rear-ptr))
          (begin (set! front-ptr (cons x front-ptr))
                 (cons front-ptr rear-ptr)))))
    (define (push x)
      (let ((new-pair (cons x '())))
        (if (empty?)
          (begin (set! front-ptr new-pair)
                 (set! rear-ptr new-pair)
                 (cons front-ptr rear-ptr))
          (begin (set-cdr! rear-ptr new-pair)
                 (set! rear-ptr new-pair)
                 (cons front-ptr rear-ptr)))))
    (define (shift)
      (if (empty?)
        "no mission"
        (if (= (length front-ptr) 1)
          (begin (set! front-ptr '())
                 (set! rear-ptr '())
                 (cons front-ptr rear-ptr))
          (begin (set! front-ptr (cdr front-ptr))
                 (cons front-ptr rear-ptr)))))
    (define (search-rear x)
      (if (null? (cddr x)) x
        (search-rear (cdr x))))
    (define (pop)
      (if (empty?)
        "no mission"
        (if (= (length front-ptr) 1)
          (begin (set! front-ptr '())
                 (set! rear-ptr '())
                 (cons front-ptr rear-ptr))
          (begin (set! rear-ptr (search-rear front-ptr))
                 (set-cdr! rear-ptr '())
                 (cons front-ptr rear-ptr)))))
    (define (print) front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'empty?) (empty?))
            ((eq? m 'front) (front))
            ((eq? m 'rear) (rear))
            ((eq? m 'unshift) unshift)
            ((eq? m 'push) push)
            ((eq? m 'shift) (shift))
            ((eq? m 'pop) (pop))
            ((eq? m 'print) (print))
            (else "no mission")))
    dispatch))

(define q1 (make-deque))
(q1 'empty?)
(q1 'front)
(q1 'rear)
((q1 'unshift) 1)
((q1 'push) 2)
(q1 'shift)
(q1 'pop)
(q1 'print)

