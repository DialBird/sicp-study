; リストを作る場合はlist関数を使うこと

(define (make-table)
  (let ((local-table (list 'table)))
    (define (lookup keys)
      (cond ((null? keys) "no keys")
            ((assoc (car keys) local-table)
             (let ((record (assoc (car keys) local-table)))
               (if (= 2 (length keys))
                 (assoc (cadr keys) record)
                 record)))
            (else #f)))
    (define (insert! keys value)
      (if (null? keys)
        "no keys"
        (let ((record (assoc (car keys) local-table)))
          (cond ((and record (= 2 (length keys)))
                 (let ((subrecord (assoc (cadr keys) record)))
                   (if subrecord
                     (set-cdr! subrecord value)
                     (set-cdr! record (cons (cons (cadr keys) value)
                                            (cdr record))))))
                ((and record (= 1 (length keys))) (set-cdr! record value))
                ((= 2 (length keys))
                 (set-cdr! local-table (cons (list (car keys)
                                                   (cons (cadr keys) value))
                                             (cdr local-table))))
                ((= 1 (length keys))
                 (set-cdr! local-table (cons (cons (car keys) value)
                                             (cdr local-table))))
                (else "invalid arguments"))))
      local-table)
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            ((eq? m 'print) local-table)
            (else "no mission")))
    dispatch))

(define t1 (make-table))
((t1 'insert!) '(a b) 'c)
((t1 'insert!) '(d e) 'f)
((t1 'insert!) '(g) 'h)
((t1 'lookup) '(d))
((t1 'lookup) '(d e))
((t1 'lookup) '(g))
(t1 'print)
