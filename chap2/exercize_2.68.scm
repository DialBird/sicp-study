(define (make-leaf symbol weight) (list 'leaf symbol weight))
(define (symbol-leaf x) (cadr x))
(define (weight-leaf x) (caddr x))
(define (leaf? object) (eq? (car object) 'leaf))
(define (make-leaf-set pairs)
  (define (adjoin-set x set)
    (cond ((null? set) (list x))
          ((< (weight x) (weight (car set)))
           (cons x set))
          (else (cons (car set) (adjoin-set x (cdr set))))))
  (if (null? pairs) '()
    (let ((pair (car pairs)))
      (adjoin-set (make-leaf (car pair)
                             (cadr pair))
                  (make-leaf-set (cdr pairs))))))
(define (make-code-tree left right)
  (list left
        right
        (append (symbols left)
                (symbols right))
        (+ (weight left)
           (weight right))))
(define (symbols tree)
  (if (leaf? tree)
    (list (symbol-leaf tree))
    (caddr tree)))
(define (weight tree)
  (if (leaf? tree)
    (weight-leaf tree)
    (cadddr tree)))
(define sample-tree
  (make-code-tree (make-leaf 'A 4)
                  (make-code-tree
                    (make-leaf 'B 2)
                    (make-code-tree (make-leaf 'D 1)
                                    (make-leaf 'C 1)))))

(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))
(define (element-of-set? x set)
  (cond ((null? set) #f)
        ((eq? x (car set)) #t)
        (else (element-of-set? x (cdr set)))))

(define (encode message tree)
  (define (encode-symbol symbol tree)
    (if (leaf? tree) '()
      (let ((lb (left-branch tree)) (rb (right-branch tree)))
        (if (element-of-set? symbol (symbols lb))
           (cons 0 (encode-symbol symbol lb))
           (cons 1 (encode-symbol symbol rb))))))
  (if (null? message) '()
    (append (encode-symbol (car message) tree)
            (encode (cdr message) tree))))

(encode '(A D A B B C A) sample-tree)
